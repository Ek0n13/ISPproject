package gr.isp.springbootapplication.web;

import gr.isp.springbootapplication.entity.Advert;
import gr.isp.springbootapplication.entity.SessionUser;
import gr.isp.springbootapplication.repository.AdvertRepository;
import gr.isp.springbootapplication.service.EmailService;
import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Controller
public class AppController {


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AdvertRepository advertRepository;

    @Autowired
    EmailService emailService;


    @GetMapping("/login")
    public String login(Model model,
                        HttpSession session
    ) {
        if (!(session.getAttribute("userEmail") == null)){
            String email = session.getAttribute("userEmail").toString();
            session.removeAttribute("userEmail");
            model.addAttribute("email", email);
        }
        return "login";
    }

    @GetMapping({"/"})
    public String mainPage(Model model, Authentication auth, HttpServletRequest request) {
        SessionUser user = getSessionUser();
        String role = findRole(request);
        if(user != null){
            String companyName = user.getCompanyName();
            model.addAttribute("companyName", companyName);
        }
        model.addAttribute("role",role);
        Iterable<Advert> adverts = advertRepository.findByStatus("Visible");
        List<Advert> advertArray = new ArrayList<Advert>();
        for (Advert ad: adverts) {
            advertArray.add(ad);
        }
        model.addAttribute("advertArray",advertArray);

        return "mainPage";
    }

    @RequestMapping(value="/view/{id}", method=RequestMethod.GET)
    public String viewAdvert(Model model,
                             @PathVariable String id
    ) {
            long idLong = 0;
            if (!(id.isEmpty())) {
                idLong = Long.parseLong(id);
            }
            Advert advert = advertRepository.findFirstById(idLong);
            model.addAttribute("advert", advert);
            return "viewAdvert";
    }

    @RequestMapping(value="/view/{id}/apply", method=RequestMethod.POST)
    public String applyForAdvertPost(Model model,
                                @PathVariable String id
    ) {
        long idLong = 0;
        if (!(id.isEmpty())) {
            idLong = Long.parseLong(id);
        }
        Advert advert = advertRepository.findFirstById(idLong);
        model.addAttribute("advert", advert);
        return "applyForAdvert";
    }

    @RequestMapping(value="/view/{id}/apply", method=RequestMethod.GET)
    public String applyForAdvertGet(Model model,
                                 @PathVariable String id
    ) {
        long idLong = 0;
        if (!(id.isEmpty())) {
            idLong = Long.parseLong(id);
        }
        Advert advert = advertRepository.findFirstById(idLong);
        model.addAttribute("advert", advert);
        return "applyForAdvert";
    }

    @PostMapping("/view/sendingApplication")
    public String uploadFile(RedirectAttributes redir,
                             @RequestParam String id,
                             @RequestParam String firstname,
                             @RequestParam String lastname,
                             @RequestParam String phone,
                             @RequestParam String email,
                             @RequestParam MultipartFile cv) throws IOException, MessagingException {

        boolean firstNameError;
        boolean lastNameError;
        boolean phoneError = false;
        boolean emailError;
        boolean cvError;

        long idLong = 0;
        if (!(id.isEmpty())) {
            idLong = Long.parseLong(id);
        }
        Advert advertApplyingFor = advertRepository.findFirstById(idLong);

        if (!(firstname.isEmpty() || lastname.isEmpty() || phone.isEmpty() || email.isEmpty() || !FilenameUtils.getExtension(cv.getOriginalFilename()).equals("pdf"))){
            String emailSentTo = advertApplyingFor.getUser().getEmail();
            String emailSubject = "Applicant Form";
            String emailBody = "Application from a job seeker has been received!" +
                    "<h2> Application Applying for: <a href='localhost:8080/view/" + advertApplyingFor.getId() + "'>" + advertApplyingFor.getTitle() + "</a></h2><br>" +
                    "<h1> First Name: " + firstname + "</h1>" +
                    "<h1> Last Name: " + lastname + "</h1>" +
                    "<h1> Phone Number: " + phone + "</h1>" +
                    "<h1> Contact E-mail: " + email + "</h1><br>" +
                    "CV can be found attached to this e-mail"
                    ;
            emailService.sendEmailWithAttachement(emailSentTo, emailSubject, emailBody, cv);
            return "redirect:/view/" + advertApplyingFor.getId();
        }

        else {
            if (firstname.isEmpty()){
                firstNameError = true;
                redir.addFlashAttribute("firstNameError", firstNameError);
            }
            if (lastname.isEmpty()){
                lastNameError = true;
                redir.addFlashAttribute("lastNameError", lastNameError);
            }

            if (email.isEmpty()){
                emailError = true;
                redir.addFlashAttribute("emailError", emailError);
            }

            if(phone.isEmpty()){
                phoneError = true;
                redir.addFlashAttribute("phoneError", phoneError);
            }

            if(!(FilenameUtils.getExtension(cv.getOriginalFilename()).equals("pdf"))){
                cvError = true;
                redir.addFlashAttribute("cvError", cvError);
            }

        }
        redir.addFlashAttribute("firstname", firstname);
        redir.addFlashAttribute("lastname", lastname);
        redir.addFlashAttribute("email", email);
        redir.addFlashAttribute("cv", cv);

        return "redirect:/view/" + advertApplyingFor.getId() + "/apply";

    }


    @GetMapping({"/contactUs"})
    public String contactUs(Model model, Authentication auth, HttpServletRequest request) {
        return "contactUs";
    }

    @PostMapping({"/contactUs/contactingUs"})
    public String contactingUs(RedirectAttributes redir,
                               @RequestParam String email,
                               @RequestParam String phone
                               ) throws IOException, MessagingException {

        boolean emailError;
        boolean phoneError = false;

        if (!(email.isEmpty() || phone.isEmpty())) {
            String emailSentTo = "jondan97@gmail.com";
            String emailSubject = "Credentials Request";
            String emailBody = "Request for credentials by a new user has been received!" +
                    "<h1> Contact E-mail: " + email + "</h1>" +
                    "<h1> Phone Number: " + phone + "</h1>";
            emailService.sendEmail(emailSentTo, emailSubject, emailBody);
            return "redirect:/";
        } else {

            if (email.isEmpty()) {
                emailError = true;
                redir.addFlashAttribute("emailError", emailError);
            }

            if(phone.isEmpty()){
                phoneError = true;
                redir.addFlashAttribute("phoneError", phoneError);
            }

            redir.addFlashAttribute("email", email);
            return "redirect:/contactUs";

        }
    }

    //roles: user, admin and visitor (has not signed in)
    private String findRole(HttpServletRequest request){
        String role = "";
        if (request.getUserPrincipal() != null) {
            if (request.isUserInRole("ROLE_ADMIN")) {
                role = "admin";
            }
            else if (request.isUserInRole("ROLE_USER")) {
                role = "user";
            }
        }
        else {
            role = "visitor";
        }
        return role;
    }

    private SessionUser getSessionUser (){
        SecurityContext securityContext = SecurityContextHolder.getContext();
        SessionUser user = null;
        if( SecurityContextHolder.getContext().getAuthentication() != null && SecurityContextHolder.getContext().getAuthentication().isAuthenticated() && !(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken) ){
            user = (SessionUser) securityContext.getAuthentication().getPrincipal();
        }
        return user;
    }

}

