package gr.isp.springbootapplication.web;

import gr.isp.springbootapplication.entity.Role;
import gr.isp.springbootapplication.entity.User;
import gr.isp.springbootapplication.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.HashSet;
import java.util.Set;

@Controller
public class AdminController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping("/admin")
    public String admin() {
        return "admin";
    }

    @RequestMapping(path="/admin/userAdding", method = RequestMethod.POST)
    public String editAdvert (Model model,
                              RedirectAttributes redir,
                              @RequestParam String email,
                              @RequestParam String password,
                              @RequestParam String passwordConfirmation,
                              @RequestParam String companyName) {
        boolean emailError;
        boolean passwordError;
        boolean passwordConfirmationError = false;
        boolean companyNameError;
        boolean passwordMismatch;

        if (!(email.isEmpty() || password.isEmpty() || companyName.isEmpty() || passwordConfirmation.isEmpty() || !password.equals(passwordConfirmation))){
            User user = new User();
            user.setEmail(email);
            user.setCompanyName(companyName);
            //encrypt password
            BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(4);
            String encodedPassword = bCryptPasswordEncoder.encode(password);
            user.setPassword(encodedPassword);
            //create role for user
            Set<Role> userRoles = new HashSet<Role>();
            Role role = new Role();
            role.setId((long) 2);
            role.setRole("ROLE_USER");
            userRoles.add(role);
            user.setRoles(userRoles);

            userRepository.save(user);
            return "redirect:/admin";
        }
        else {

            if (email.isEmpty()){
                emailError = true;
                redir.addFlashAttribute("emailError", emailError);
            }

            if(password.isEmpty()){
                passwordError = true;
                redir.addFlashAttribute("passwordError",passwordError);
            }

            if (passwordConfirmation.isEmpty()){
                passwordConfirmationError = true;
                redir.addFlashAttribute("passwordConfirmationError", passwordConfirmationError);
            }
            else if (!password.equals(passwordConfirmation)){
                passwordMismatch = true;
                redir.addFlashAttribute("passwordMismatch",passwordMismatch);
            }

            if(companyName.isEmpty()){
                companyNameError = true;
                redir.addFlashAttribute("companyNameError", companyNameError);
            }

        }

        redir.addFlashAttribute("email", email);
        redir.addFlashAttribute("password", password);
        redir.addFlashAttribute("passwordConfirmation", passwordConfirmation);
        redir.addFlashAttribute("companyName", companyName);

        return "redirect:/admin";

    }
}

