package gr.isp.springbootapplication.web;

import gr.isp.springbootapplication.entity.Advert;
import gr.isp.springbootapplication.repository.AdvertRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Controller
public class AppController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AdvertRepository advertRepository;

    @PostMapping(path="/postEditing") // Map ONLY POST Requests
    public String editAdvert (Model model,
                              RedirectAttributes redir,
                                @RequestParam String id,
                                @RequestParam String title,
                         @RequestParam String body,
                         @RequestParam String salary
                        , @RequestParam String industry) {
        // @RequestParam means it is a parameter from the GET or POST request

        boolean titleError = false;
        boolean bodyError = false;
        boolean salaryError = false;
        Integer salaryInt = 0;
        Integer idInt = Integer.parseInt(id);

        try {
            if (!(salary.isEmpty())) {
                salaryInt = Integer.parseInt(salary);
            }
        } catch (NumberFormatException | NullPointerException nfe) {
            salaryError = true;
        }

        if (!(title.isEmpty() || body.isEmpty() || salaryError)){
            Advert ad = new Advert();
            ad.setId(idInt);
            ad.setTitle(title);
            ad.setBody(body);
            ad.setIndustry(industry);
            if (salaryInt == null) salaryInt = 0;
            ad.setSalary(salaryInt);
            advertRepository.save(ad);
            return "redirect:/";
        }

        else {
            if (title.isEmpty()){
                titleError = true;
                redir.addFlashAttribute("titleError", titleError);
            }
            if (body.isEmpty()){
                bodyError = true;
                redir.addFlashAttribute("bodyError", bodyError);
            }
            if (salaryError){
                salaryError = true;
                redir.addFlashAttribute("salaryError", salaryError);
            }
            redir.addFlashAttribute("title", title);
            redir.addFlashAttribute("body", body);
            redir.addFlashAttribute("industry", industry);
            redir.addFlashAttribute("salary", salary);

            return "redirect:/postAd";
        }
    }

    @PostMapping(path="/postAdding") // Map ONLY POST Requests
    public String addNewAdvert (Model model,
                                RedirectAttributes redir,
                                @RequestParam String title,
                                @RequestParam String body,
                                @RequestParam String salary
            , @RequestParam String industry) {
        // @RequestParam means it is a parameter from the GET or POST request

        boolean titleError = false;
        boolean bodyError = false;
        boolean salaryError = false;
        Integer salaryInt = 0;

        try {
            if (!(salary.isEmpty())) {
                salaryInt = Integer.parseInt(salary);
            }
        } catch (NumberFormatException | NullPointerException nfe) {
            salaryError = true;
        }

        if (!(title.isEmpty() || body.isEmpty() || salaryError)){
            Advert ad = new Advert();
            ad.setTitle(title);
            ad.setBody(body);
            ad.setIndustry(industry);
            if (salaryInt == null) salaryInt = 0;
            ad.setSalary(salaryInt);
            advertRepository.save(ad);
            return "redirect:/";
        }

        else {
            if (title.isEmpty()){
                titleError = true;
                redir.addFlashAttribute("titleError", titleError);
            }
            if (body.isEmpty()){
                bodyError = true;
                redir.addFlashAttribute("bodyError", bodyError);
            }
            if (salaryError){
                salaryError = true;
                redir.addFlashAttribute("salaryError", salaryError);
            }
            redir.addFlashAttribute("title", title);
            redir.addFlashAttribute("body", body);
            redir.addFlashAttribute("industry", industry);
            redir.addFlashAttribute("salary", salary);

            return "redirect:/postAd";
        }
    }

    @GetMapping(path="/allPosts")
    public @ResponseBody Iterable<Advert> getAllUsers() {
        // This returns a JSON or XML with the users
        return advertRepository.findAll();
    }

    @GetMapping(path="/postAd")
    public String postAd() { return "postAd";}

    @GetMapping("/login")
    public String index() {
        return "index";
    }

    @GetMapping({"/","/menu"})
    public String menu(Model model, Authentication authentication, HttpServletRequest request) {
        String role = findRole(request);
        model.addAttribute("role",role);

        Iterable<Advert> adverts = advertRepository.findAll();
        List<Advert> advertArray = new ArrayList<Advert>();
        for (Advert ad: adverts) {
            advertArray.add(ad);
        }
        model.addAttribute("advertArray",advertArray);
        return "menu";
    }

    @GetMapping("/user")
    public String user() {
        return "user";
    }

    @GetMapping("/admin")
    public String admin() {
        return "admin";
    }



    //roles: user, admin and visitor (has not signed in)
    private String findRole(HttpServletRequest request){
        String role = "";
        if (request.getUserPrincipal() != null) {
            if (request.isUserInRole("ROLE_ADMIN")) {
                role = "admin";
            }
            else if (request.isUserInRole("ROLE_USER")) {
                role = "user";
            }
        }
        else {
            role = "visitor";
        }
        return role;
    }
}

